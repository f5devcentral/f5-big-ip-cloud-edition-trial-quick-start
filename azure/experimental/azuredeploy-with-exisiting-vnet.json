{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "6.1.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "azureuser",
            "type": "string",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "authenticationType": {
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "type": "string",
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine, password based authentication or key based authentication."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            }
        },
        "bigIqPassword":{
            "type": "securestring",
            "minLength": 1,
            "metadata": {
            "description": "Password for BIG IQ DCD , CM instances "
            }
        },
        "instanceType": {
            "defaultValue": "Standard_D4s_v3",
            "allowedValues": [
                "Standard_D4s_v3",
                "Standard_D2s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3"
            ],
            "type": "string",
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            }
        },
        "bigIqVersion": {
            "defaultValue": "6.1.000000",
            "allowedValues": [
                "6.1.000000"
                ],
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IQ version you want to use."
            }
        },
        "bigIqCMLicenseKey1": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IQ CM license key "
            }
        },
        "bigIqDCDLicenseKey2": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IQ DCD license key"
            }
        },
        "bigIPLicensePoolKey": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IP license pool key"
            }
        },
        "servicePrincipalSecret":{
            "minLength": 1,
            "maxLength": 666,
            "type": "string",
            "metadata": {
                "description": "azure f5 service principal secret key"
            }
        },
        "azureClientId":{
            "minLength": 1,
            "maxLength": 111,
            "type": "string",
            "metadata": {
                "description": "azure client id"
            }
        },
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IQ VEs."
            },
            "type": "string"
        },
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IQ VE will be placed."
            },
            "type": "string"
        },
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing mgmt subnet - with external access to the Internet. **Important**: The subnet you provide for the mgmt NIC **must** be unique."
            },
            "type": "string"
        },
        "internalSubnetName": {
            "metadata": {
                "description": "Name of the existing internal subnet. **Important**: The subnet you provide for the internal NIC **must** be unique."
            },
            "type": "string"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
              "description": "Location for all resources."
            }
          },
        "restrictedSrcAddress": {
            "defaultValue": "*",
            "type": "string",
            "metadata": {
                "description": " The IP address range used to SSH and access managment GUI on the BIG-IQ instances"
            }
        },
        "ssgName" : {
            "type":"string",
            "defaultValue": "trial-azure-ssg",
            "metadata": {
                "description": "SSG name must be fewer than 25 characters"
            }
        },
        "dcdInstanceName": {
            "defaultValue": "demo-ssg-trial-dcd",
            "minLength": 1,
            "maxLength": 25,
            "type": "string",
            "metadata": {
                "description": "A unique CloudFormation StackName within your azure account, to be used to set DCD server instance."
            }
        },
        "cmInstanceName": {
            "defaultValue": "demo-ssg-trial-cm",
            "minLength": 1,
            "maxLength": 25,
            "type": "String",
            "metadata": {
                "description": "A unique CloudFormation StackName within your azure account, to be used to set CM server instance."
            }
        },
        "customImage": {
            "defaultValue": "OPTIONAL",
            "type": "string",
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            }
        },
        "tagValues": {
            "defaultValue": {
                "application": "BIGIQ"
            },
            "type": "object",
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }
        }
    },
    "variables": {
        "computeApiVersion": "2018-10-01",
        "networkApiVersion": "2018-08-01",
        "storageApiVersion": "2017-10-01",
        "location": "[parameters('location')]",
        "adminPasswordOrKey": "[parameters('adminPasswordOrKey')]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[variables('adminPasswordOrKey')]",
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        },
        "subscriptionID": "[subscription().subscriptionId]",
        "tenantID":"[subscription().tenantId]",
        "azureclientId":"[parameters('azureClientId')]",
        "ssgName":"[parameters('ssgName')]",
        "resourceGroupName": "[parameters('vnetResourceGroupName')]",
        "singleQuote": "'",
        "skuToUse": "f5-bigiq-virtual-edition-byol",
        "offerToUse": "f5-big-iq",
        "imagePlan": {
            "name": "[variables('skuToUse')]",
            "product": "[variables('offerToUse')]",
            "publisher": "f5-networks"
        },
        "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIqVersion')]"
        },
        "bigIpName": "f5-big-all-1slot-byol",
        "bigIpVersion": "13.1.100000",
        "bigIpPassword": "[parameters('bigIqPassword')]",
        "bigIqPassword": "[parameters('bigIqPassword')]",
        "cmDnsName": "[concat('azurebigiq-cm','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "dcdDnsName": "[concat('azurebigiq-dcd','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "servicePrincipalSecret" : "[parameters('servicePrincipalSecret')]",
        "dcdInstanceName": "[toLower(parameters('dcdInstanceName'))]",
        "cmInstanceName": "[toLower(parameters('cmInstanceName'))]",
        "virtualNetworkName": "[parameters('vnetName')]",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "publicIPAddressType": "Static",
        "extPublicIPAddressName": "[concat('BIG-IQ-DCD-' , variables('resourceGroupName') , '-IP','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "dcdPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressName'))]",
        "mgmtNicName": "[concat('BIG-IQ-DCD-NetworkInterface-' , variables('resourceGroupName'))]",
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]",
        "intNicName": "[concat('BIG-IQ-CM-NetworkInterface-' , variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtNicName2": "[concat('BIG-IQ-DCD2-NetworkInterface-' , variables('resourceGroupName') ,'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "intNicName2": "[concat('BIG-IQ-CM2-NetworkInterface-' , variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]",
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
        "mgmtNsgName": "[concat('BIG-IQ-', variables('resourceGroupName') ,'-SG','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('mgmtNsgName'))]",
        "intSubnetName": "[parameters('internalSubnetName')]",
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
        "intpublicIPAddressName": "[concat('BIG-IQ-CM-' , variables('resourceGroupName') , '-IP','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "cmPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('intPublicIPAddressName'))]",
        "tagValues": "[parameters('tagValues')]",
        "lbDnsName" : "[concat( 'ip10-azureinternal-f5','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "newDataStorageAccountName": "[concat(uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name), 'data000')]",
        "dataStorageAccountType": "Standard_LRS",
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]",
        "useCustomImage": "[not(empty(variables('customImage')))]",
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]",
        "newCustomImageName": "[concat(variables('resourceGroupName'), '-image')]",
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            },
            "platformImage": {
                "imageReference": "[variables('imageReference')]",
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        },
        "premiumInstanceArray": [
            "Standard_DS2",
            "Standard_DS3",
            "Standard_DS4",
            "Standard_DS11",
            "Standard_DS12",
            "Standard_DS13",
            "Standard_DS14",
            "Standard_DS2_v2",
            "Standard_DS3_v2",
            "Standard_DS4_v2",
            "Standard_DS5_v2",
            "Standard_DS11_v2",
            "Standard_DS12_v2",
            "Standard_DS13_v2",
            "Standard_DS14_v2",
            "Standard_DS15_v2",
            "Standard_F2S",
            "Standard_F4S",
            "Standard_F8S",
            "Standard_F16S",
            "Standard_GS2",
            "Standard_GS3",
            "Standard_GS4",
            "Standard_GS5"
        ],
        "dcdStartupScript":"bm9odXAgL2NvbmZpZy9jbG91ZC9zZXR1cC1kY2QtYmFja2dyb3VuZC5zaCAmPiAvdmFyL2xvZy9zZXR1cC5sb2cgPCAvZGV2L251bGwgJgplY2hvICd0YWlsIC1mIC92YXIvbG9nL3NldHVwLmxvZyBpbiBvcmRlciB0byBtb25pdG9yIHNldHVwIHByb2dyZXNzJw==",
        "cmStartUpScript": "bm9odXAgL2NvbmZpZy9jbG91ZC9zZXR1cC1jbS1iYWNrZ3JvdW5kLnNoICY+IC92YXIvbG9nL3NldHVwLmxvZyA8IC9kZXYvbnVsbCAmCmVjaG8gJ3RhaWwgLWYgL3Zhci9sb2cvc2V0dXAubG9nIGluIG9yZGVyIHRvIG1vbml0b3Igc2V0dXAgcHJvZ3Jlc3MnCmVjaG87ZWNobyAnTWFrZSBzdXJlIHlvdSBmb2xsb3cgVGVhcmRvd24gaW5zdHJ1Y3Rpb25zIGZyb20gdGhlIEdpdEh1YiByZXBvc2l0b3J5IG9uY2UgeW91IGFyZSBkb25lIHdpdGggeW91ciB0ZXN0aW5nLic="
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('intpublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('cmDnsName')]"
                  }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('extPublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dcdDnsName')]"
                  }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mgmtNsgName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh_allow_22",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "http_allow_80",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "80",
                            "direction": "Inbound",
                            "priority": 103,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "ssl_allow_443",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 104,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "mgmt_console_allow_8443",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "8443",
                            "direction": "Inbound",
                            "priority": 105,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mgmtNicName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dcdInstanceName'), '-ipconfig1')]",
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[variables('dcdPublicIPAddressId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "dependsOn": [
                "[variables('dcdPublicIPAddressId')]",
                "[variables('mgmtNsgID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('intNicName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('cmInstanceName'), '-ipconfig2')]",
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[variables('cmPublicIPAddressId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "dependsOn": [
                "[variables('cmPublicIPAddressId')]",
                "[variables('mgmtNsgID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mgmtNicName2')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dcdInstanceName'), '-ipconfig1')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "dependsOn": [
                "[variables('dcdPublicIPAddressId')]",
                "[variables('mgmtNsgID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('intNicName2')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('cmInstanceName'), '-ipconfig2')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "dependsOn": [
                "[variables('cmPublicIPAddressId')]",
                "[variables('mgmtNsgID')]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "[variables('dataStorageAccountType')]",
                "tier": "Standard"
            },
            "kind": "Storage",
            "name": "[variables('newDataStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "type": "Microsoft.Compute/images",
            "name": "[variables('newCustomImageName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]",
                        "osState": "Generalized",
                        "osType": "Linux",
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            },
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]"
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('dcdInstanceName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mgmtNicName'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mgmtNicName2'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[variables('dcdInstanceName')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[variables('newCustomImageName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName2'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('cmInstanceName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('intNicName'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('intNicName2'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[variables('cmInstanceName')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[variables('newCustomImageName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'))]",
                "[variables('intNicName2')]"
            ]
        },
         {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('dcdInstanceName'),'/dcdStartupScript')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "protectedSettings": {
                    "commandToExecute": "[concat('mkdir -p /config/cloud; cd /config/cloud ; curl -L https://github.com/f5devcentral/f5-big-ip-cloud-edition-trial-quick-start/blob/6.1.0/azure/built/scripts.tar.gz?raw=true > scripts.tar.gz ;tar --strip-components=1 -xvzf scripts.tar.gz ; echo ', variables('singleQuote'),concat('#!/usr/bin/env bash','\n','sleep 180','\n','mkdir -p /config/cloud \n','cd /config/cloud \n','curl -L https://github.com/f5devcentral/f5-big-ip-cloud-edition-trial-quick-start/blob/6.1.0/azure/built/scripts.tar.gz?raw=true > scripts.tar.gz \n','tar --strip-components=1 -xvzf scripts.tar.gz ','\n','tmsh create auth user adminUser password ',variables('bigIqPassword'),' shell tmsh partition-access add {all-partitions {role admin}} && tmsh save sys config' ,'\n','/config/cloud/wait-for-rjd.py \n','tmsh modify auth user admin password ',variables('bigIqPassword'),' && tmsh save sys config && set-basic-auth on \n','/config/cloud/configure-bigiq.py --LICENSE_KEY ', parameters('bigIqDCDLicenseKey2'),' --MASTER_PASSPHRASE ValidPassphrase1234567812345678! --TIMEOUT_SEC 1200 --NODE_TYPE DCD --HOST_NAME ',reference(variables('extPublicIPAddressName')).dnsSettings.fqdn),variables('singleQuote') ,' > /config/cloud/setup-dcd-background.sh; chmod +x /config/cloud/setup-dcd-background.sh;','echo ', variables('dcdStartUpScript'), ' | /usr/bin/base64 -d > /config/cloud/setup-dcd.sh; chmod +x /config/cloud/setup-dcd.sh;nohup /config/cloud/setup-dcd.sh &> /var/log/setup.log < /dev/null &')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": []
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dcdInstanceName'))]",
                "[variables('extPublicIPAddressName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('cmInstanceName'),'/cmStartupScript')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "protectedSettings": {
                    "commandToExecute": "[concat('mount -o remount,rw /usr;sleep 180; pip install azure;mkdir -p /config/cloud; cd /config/cloud ; curl -L https://github.com/f5devcentral/f5-big-ip-cloud-edition-trial-quick-start/blob/6.1.0/azure/built/scripts.tar.gz?raw=true > scripts.tar.gz ;tar --strip-components=1 -xvzf scripts.tar.gz ; echo ' ,variables('singleQuote') , concat('#!/usr/bin/env bash','\n','sleep 90','\n','mount -o remount,rw /usr','\n','mkdir -p /config/cloud\n','cd /config/cloud \n','curl -L https://github.com/f5devcentral/f5-big-ip-cloud-edition-trial-quick-start/blob/6.1.0/azure/built/scripts.tar.gz?raw=true > scripts.tar.gz \n','tar --strip-components=1 -xvzf scripts.tar.gz \n','/config/cloud/configure-bigiq.py --LICENSE_KEY ', parameters('bigIqCMLicenseKey1'),' --MASTER_PASSPHRASE ValidPassphrase1234567812345678! --TIMEOUT_SEC 1200 --NODE_TYPE CM --HOST_NAME ',reference(variables('intPublicIPAddressName')).dnsSettings.fqdn,'\n','if [ $? -ne 0 ]','\n','then','\n','  echo Configuring BIG-IQ failed, might be an issue with license activation, tail -f /var/log/setup.log for more details.','\n','  exit 1','\n','fi\n','sleep 10\n','/config/cloud/add-dcd.py --DCD_IP_ADDRESS ',reference(variables('mgmtNicID')).ipConfigurations[0].properties.privateIPAddress,' --DCD_PWD ',variables('bigIqPassword'),' --DCD_USERNAME adminUser','\n','if [ $? -ne 0 ]','\n','then','\n','  echo Configuring BIG-IQ DCD to CM failed, tail -f /var/log/restjavad.0.log for more details.','\n','  exit 1','\n','fi\n','sleep 10\n','tmsh modify auth user admin password ',variables('bigIqPassword'),' && tmsh save sys config','\n','/config/cloud/activate-dcd-services.py --SERVICES asm --DCD_IP_ADDRESS ',reference(variables('mgmtNicID')).ipConfigurations[0].properties.privateIPAddress,'\n','set-basic-auth on \n','/config/cloud/create-license-pool.py --REG_KEY ',parameters('bigIPLicensePoolKey'),' --BIG_IQ_PWD ',variables('bigIqPassword'),' \n','set-basic-auth off \n','/config/cloud/create-auto-scaling.py --RESOURCE ', variables('resourceGroupName') ,' --DEFAULT_LOCATION ',variables('location'),' --VNET1 ',variables('virtualNetworkName'),' --SUBNET1 ',variables('mgmtSubnetName'),' --BYOL_BIGIP_NAME ',variables('bigIpName'),' --BYOL_BIGIP_VERSION ',variables('bigIpVersion'),' --SUBSCRIPTION_ID ',variables('subscriptionID'),' --SERVICE_PRINCIPAL_SECRET ',variables('servicePrincipalSecret'),' --TENANT_ID ',variables('tenantID'),' --CLIENT_ID ',variables('azureclientId'),' --BIGIQ_URI http://localhost:8100',' --BIGIP_USER adminUser',' --BIGIP_PWD ',variables('bigIpPassword'),' --CLOUD_PROVIDER_NAME azure',' --CLOUD_ENVIRONMENT_NAME azure-env ',' --DEVICE_TEMPLATE_NAME default-ssg-template ',' --LOOKUP_SERVER_LIST 8.8.8.8',' --NTP_SERVER 0.pool.ntp.org',' --SSG_NAME ',variables('ssgName'),' --CM_IP ',reference(variables('intNicName')).ipConfigurations[0].properties.privateIPAddress,' --BIG_IQ_PWD ',variables('bigIqPassword'),'\n'), variables('singleQuote'), ' > /config/cloud/setup-cm-background.sh;chmod +x /config/cloud/setup-cm-background.sh;','echo ', variables('cmStartUpScript'), ' | /usr/bin/base64 -d > /config/cloud/setup-cm.sh; chmod +x /config/cloud/setup-cm.sh;nohup /config/cloud/setup-cm.sh &> /var/log/setup.log < /dev/null &')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": []
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('cmInstanceName'))]",
                "[variables('intPublicIPAddressName')]"
            ]
        }
    ],
    "outputs": {
        "BIGIQ-DCD-GUI-URL": {
            "type": "string",
            "value": "[concat('https://', reference(variables('dcdPublicIPAddressId')).ipAddress, ':', 443)]"
        },
        "BIGIQ-DCD-sshCommand": {
            "type": "string",
            "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('dcdPublicIPAddressId')).ipAddress)]"
          },
          "BIGIQ-CM-GUI-URL": {
            "type": "string",
            "value": "[concat('https://', reference(variables('cmPublicIPAddressId')).ipAddress, ':', 443)]"
        },
        "BIGIQ-CM-sshCommand": {
            "type": "string",
            "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('cmPublicIPAddressId')).ipAddress)]"
          }
    }
}
